install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
install.packages("swirl")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?mamip
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_OS=="linux-gnu")
filter(cran, size>100500, r_oS=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
can3
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(swirl)
ls()
swirl()
1
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarze(by_package, mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
reset
submit
submit()
submit()
submit()
submit
submit()
submit()
submit()
oauth_endpoints("github")
library(httr)
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "162de9b0fdd1d8c24d62", "945a90f17efd6a2010f425f3d5b0108e7b826fca")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications;
#    Use any URL you would like for the homepage URL (http://github.com is fine)
#    and http://localhost:1410 as the callback url
#
#    Insert your client ID and secret below - if secret is omitted, it will
#    look it up in the GITHUB_CONSUMER_SECRET environmental variable.
myapp <- oauth_app("github", "162de9b0fdd1d8c24d62")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library("httr", lib.loc="~/R/win-library/3.1")
library("httpuv", lib.loc="~/R/win-library/3.1")
oauth_endpoints("github")
github <- oauth_endpoints("github")
myapp <- oauth_app("github", key="162de9b0fdd1d8c24d62",
secret="945a90f17efd6a2010f425f3d5b0108e7b826fca")
github_token <- oauth2.0_token(github, myapp)
github_token <- "497d6516809e9464707b113b5cf7c8c7c502f1a0"
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
github <- oauth_endpoints("GetDataQuiz2")
myapp
gtoken
library("DoseFinding", lib.loc="~/R/win-library/3.1")
glycobrom$dose)
## simulate a full data set with given means and sdv (here we ignore
## the original study was a cross-over design, and simulate a parallel
## group design)
simData <- function(mn, sd, n, doses, fixed = TRUE){
## simulate data with means (mns) and standard deviations (sd), for
## fixed = TRUE, the data set will have observed means and standard
## deviations as given in mns and sd
resp <- numeric(sum(n))
uppind <- cumsum(n)
lowind <- c(0,uppind)+1
for(i in 1:length(n)){
rv <- rnorm(n[i])
if(fixed)
rv <- scale(rv)
resp[lowind[i]:uppind[i]] <- mn[i] + sd[i]*rv
}
data.frame(doses=rep(doses, n), resp=resp)
}
data(glycobrom)
fullDat <- simData(glycobrom$fev1, glycobrom$sdev, glycobrom$n,
glycobrom$dose)
View(fullDat)
View(fullDat)
library(MASS)
# Create data
create.data <- function (n, levels)
{
dose <- levels
total <- n * length(dose)
X <- data.frame(resp=1:total,dose=dose)
for (i in 1:total) {
ifelse ((X$dose[i] == 0), X$resp[i] <- rnorm(1, mean=100, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 1), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 2), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 3), X$resp[i] <- rnorm(1, mean=102, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 4), X$resp[i] <- rnorm(1, mean=102, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 5), X$resp[i] <- rnorm(1, mean=103, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 6), X$resp[i] <- rnorm(1, mean=104, sd=0.5), X$resp[i] <- X$resp[i])
}
return(X)
}
data.sim <- create.data(16, c(0,1,2,3,4,5,6))
View(data.sim)
# Create data
create.data <- function (n, levels)
{
dose <- levels
dog <- 1:n
total <- n * length(dose)
X <- data.frame(resp=1:total,dose=dose, dog=dog)
for (i in 1:total) {
ifelse ((X$dose[i] == 0), X$resp[i] <- rnorm(1, mean=100, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 1), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 2), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 3), X$resp[i] <- rnorm(1, mean=102, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 4), X$resp[i] <- rnorm(1, mean=102, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 5), X$resp[i] <- rnorm(1, mean=103, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 6), X$resp[i] <- rnorm(1, mean=104, sd=0.5), X$resp[i] <- X$resp[i])
}
return(X)
}
data.sim <- create.data(16, c(0,1,2,3,4,5,6))
View(data.sim)
?mutate
??mutate
arrange(data.sim, dog, dose)
library("dplyr", lib.loc="~/R/win-library/3.1")
library(dplyr)
arrange(data.sim, dog, dose)
summarise(group_by(dog, dose), n(resp), mean(resp))
summarise(group_by(data.sim, dog, dose), n(resp), mean(resp))
summarise(group_by(data.sim, dog, dose), n, mean(resp))
summarise(group_by(data.sim, dog, dose), n)
summarise(group_by(data.sim, dog, dose), mean(resp))
summarise(group_by(data.sim, dog), mean(resp))
summarise(group_by(data.sim, dose), mean(resp))
?glm
?mixed
??mixed
?lme
lme(resp~dose, data=data.sim, rand= ~ dog, correlation="corSymm")
library(DoseFinding)
library(MASS)
library(dplyr)
library(nlme)
lme(resp~dose, data=data.sim, rand= ~ dog, correlation="corSymm")
lme(resp~dose, data=data.sim, rand= ~ dog)
View(data.sim)
lme(resp~dose, data=data.sim)
test <- lme(resp ~ dose, data=data.sim)
Orthodont
?formula
test <- lme(formula(resp ~ dose), data=data.sim)
formula(data.sim)
test <- lme(resp ~ dose, data=data.sim)
plot(data.sim)
form.sim <- formula(data.sim)
test <- lme(resp ~ dose, data=form.sim)
test <- lme(form.sim, data=data.sim)
test <- lme(resp ~ dose+dog, data=data.sim)
formula(data.sim)
groupedData(resp~dose | dog, data=data.sim)
test <- lme(resp ~ dose, data=data.sim)
test <- lme(resp~dose, data=data.sim)
data.sim
data.grp <- groupedData(resp~dose | dog, data=data.sim)
test <- lme(resp~dose, data=data.grp)
summary(test)
lme(resp~dose, data=data.grp, rand= ~ dog, correlation="corSymm")
lme(resp~dose, data=data.grp, random= ~ dog, correlation="corSymm")
lme(resp~dose, data=data.grp, correlation="corSymm")
lme(resp~dose, data=data.grp, corClasses="corSymm")
install.packages("lme4")
library(lme4)
library(arm)
install.packages("arm")
library(lme4)
library(arm)
test <- lmer(resp~dose + (1|dog), data=data.sim)
display(test)
?lmer
vv <- vcov.merMod(test, corr=TRUE)
display(vv)
vv
summary(test)
test <- lmer(resp~dose + (1|dog), data=data.sim, corClasses="corSymm")
# Create data
create.data <- function (n, levels)
{
dose <- levels
dog <- 1:n
total <- n * length(dose)
X <- data.frame(resp=1:total,dose=dose, dog=dog)
for (i in 1:total) {
ifelse ((X$dose[i] == 0), X$resp[i] <- rnorm(1, mean=100, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 1), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 2), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 3), X$resp[i] <- rnorm(1, mean=101, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 4), X$resp[i] <- rnorm(1, mean=102, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 5), X$resp[i] <- rnorm(1, mean=103, sd=0.5), X$resp[i] <- X$resp[i])
ifelse ((X$dose[i] == 6), X$resp[i] <- rnorm(1, mean=104, sd=0.5), X$resp[i] <- X$resp[i])
}
return(X)
}
data.sim <- create.data(16, c(0,1,2,3,4,5,6))
arrange(data.sim, dog, dose)
summarise(group_by(data.sim, dog), mean(resp))
summarise(group_by(data.sim, dose), mean(resp))
plot(data.sim)
test <- lmer(resp~dose + (1|dog), data=data.sim)
summary(test)
test <- lmer(resp~dose + (dose|dog), data=data.sim)
summary(test)
sigma(test)
?fitMod
?par
par("lty")
options("device")
par()
library(datasets)
data(airquality)
library(datasets)
data(airquality)
airquality
summary(airquality)
?points
?axis
lpoints
?lpoints
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500, r_os=="linux-gnu" )
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
install.packages("crossdes")
attach(crossdes)
library("crossdes", lib.loc="~/R/win-library/3.1")
library(crossdes)
?find.BIBD
?find.BIB
find.BIB(16, 4800, 5)
find.BIB(16, 4800, 5)
design <- find.BIB(16, 300, 5)
isGYD(design)
View(design)
design1 <- find.BIB(16, 4800, 5)
isGYD(design1)
View(design1)
hist(design1$V1)
hist(as.data.frame(design1$V1))
t <- as.data.frame(design1)
hist(t$V1))
hist(t$V1)
summary(t$V1)
hist(as.factor(t$V1))
plan <- get.plan(16, 5, maxsub=4800)
plan
plan <- get.plan(16, 5, maxsub=4800)
head(plan)
sum(plan[,1])
sum(plan[,2])
sum(plan[,3])
sum(plan[,4])
sum(plan[,5])
isCbalanced(plan)
?knit2htnml
?knit2html
library(knitr)
?knit2html
knit2html(PA1_template.Rmd)
attach(PA1_template.Rmd)
setwd('~/Cousera/Reproducible Research/RepData_PeerAssessment1')
attach(PA1_template.Rmd)
library(dplyr)
library(lubridate)
library(knitr)
library(reshape2)
library(ggplot2)
library(lattice)
setwd('~/Cousera/Reproducible Research/RepData_PeerAssessment1')
getwd()
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
